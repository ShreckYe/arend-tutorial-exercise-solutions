\import Universes

-- 1. Calculate levels in each of the the invocations of 'id''' below.
--    Specify explicitly result types for all idTest*.

\func id'' {A : \Type} (a : A) => a

\func idTest1 : \Pi (A : \Type \lp) A -> A => id'' (id'' id)
\func idTest2 : \Type \lp -> \Type \lp => id'' Maybe
\func idTest3 : \Type (\suc \lp) => id'' Functor
-- \func idTest3 : (\Type \lp -> \Type \lp) -> \Type (\suc \lp) => id'' Functor
\func idTest4 : \Type (\suc \lp) => id'' (Functor Maybe)
\func idTest5 (f : \Pi {A B : \Set} -> (A -> B) -> Maybe A -> Maybe B) : \Type \lp => id'' (Functor Maybe f)

\import Equality (funExt, inv, pmap)

\func funExt2 {A1 : \Type} {A2 : \Type} (B : A1 -> A2 -> \Type) {f g : \Pi (a1 : A1) (a2 : A2) -> B a1 a2}
              (p : \Pi (a1 : A1) (a2 : A2) -> f a1 a2 = g a1 a2) : f = g =>
  path (\lam i a1 a2 => p a1 a2 @ i)

\func funExt2-dep {A1 : \Type} {A2 : A1 -> \Type} (B : \Pi (a1 : A1) (A2 a1) -> \Type) {f g : \Pi (a1 : A1) (a2 : A2 a1) -> B a1 a2}
                  (p : \Pi (a1 : A1) (a2 : A2 a1) -> f a1 a2 = g a1 a2) : f = g =>
  path (\lam i a1 a2 => p a1 a2 @ i)

-- well-founded induction implemented referring to the Agda implementation
-- see: https://stackoverflow.com/questions/19642921/assisting-agdas-termination-checker
-- see: https://agda.github.io/agda-stdlib/Induction.WellFounded.html

\data Acc {A : \Type} (< : A -> A -> \Type) (x : A)
  | acc (rs : \Pi (y : A) -> y `<` x -> Acc < y)

-- \func WF {A : \Type} (< : A -> A -> \Type) => \Pi (x : A) -> Acc < x

\func wf-ind {A : \Type} {< : A -> A -> \Type}
             (E : A -> \Type)
             (r : \Pi (x : A) -> (\Pi (y : A) -> y `<` x -> E y) -> E x)
             (x : A) (acc-x : Acc < x): E x \elim acc-x
  | acc rs => r x (\lam y y<x => wf-ind E r y (rs y y<x))

\func wf-ind-acc-irrelevant
  {A : \Type} {< : A -> A -> \Type}
  (E : A -> \Type)
  (r : \Pi (x : A) -> (\Pi (y : A) -> y `<` x -> E y) -> E x)
  (x : A) (acc-x-1 acc-x-2 : Acc < x) : wf-ind E r x acc-x-1 = wf-ind E r x acc-x-2 \elim acc-x-1, acc-x-2
  | acc rs-1, acc rs-2 => pmap (r x)
      (funExt2-dep {A} {\lam y => y `<` x} (\lam y y<x => E y) (\lam y y<x => wf-ind-acc-irrelevant E r y (rs-1 y y<x) (rs-2 y y<x)))

\func acc-unique {A : \Type} {< : A -> A -> \Type} {x : A} (acc-x-1 acc-x-2 : Acc < x) : acc-x-1 = acc-x-2 \elim <, acc-x-1, acc-x-2
  | <, acc rs-1, acc rs-2 => pmap acc
      (funExt2-dep {A} {\lam y => y `<` x} (\lam y y<x => Acc < y) (\lam y y<x => acc-unique (rs-1 y y<x) (rs-2 y y<x)))

\func wf-ind-acc-irrelevant'
  {A : \Type} {< : A -> A -> \Type}
  (E : A -> \Type)
  (r : \Pi (x : A) -> (\Pi (y : A) -> y `<` x -> E y) -> E x)
  (x : A) (acc-x-1 acc-x-2 : Acc < x) : wf-ind E r x acc-x-1 = wf-ind E r x acc-x-2 =>
  pmap (wf-ind E r x) (acc-unique acc-x-1 acc-x-2)

-- end of well-founded induction base definitions

\func t< => \lam x y => T (x < y)

\func absurd {A : \Type} (e : Empty) : A

\func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  coe (\lam i => B (p @ i)) b right

\import Proofs (inl, inr, ||)

\func wf-t< (x : Nat) : Acc t< x
  | 0 => acc (\lam y t[y<0] => t[n<0]-elim t[y<0])
  | suc x => acc (\lam y t[y<sx] => \let acc-x => wf-t< x \in \case t[y<sx]->y=x||t[y<x] t[y<sx] \with {
    | inl y=x => transport (Acc t<) (inv y=x) acc-x
    | inr t[y<x] => \case acc-x \with {
      | acc rs => rs y t[y<x]
    }
  })
  \where {
    \func t[n<0]-elim {A : \Type} {n : Nat} (t : T (n < 0)) : A \elim n, t
      | 0, ()

    \func t[y<sx]->y=x||t[y<x] {x y : Nat} (t[y<sx] : T (y < suc x)) : (y = x) || T (y < x) \elim x, y, t[y<sx]
      | 0, 0, unit => inl idp
      | 0, suc y, t[y<sx] => t[n<0]-elim t[y<sx]
      | suc x, 0, unit => inr unit
      | suc x, suc y, t[y<sx] => \case t[y<sx]->y=x||t[y<x] t[y<sx] \with {
        | inl y=x => inl (pmap suc y=x)
        | inr t[y<x] => inr t[y<x]
      }
  }

\func Nat-ind (E : Nat -> \Type)
              (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> T (k < n) -> E k) -> E n)
              (n : Nat) : E n =>
  wf-ind E r n (wf-t< n)
  \where
    \func with-acc (E : Nat -> \Type)
                   (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> T (k < n) -> E k) -> E n)
                   (n : Nat) (acc-n : Acc t< n) : E n =>
      wf-ind E r n acc-n

-- 2. Define 'div' via 'Nat-ind'.

\func t[n<sn] (n : Nat) : T (n < suc n)
  | 0 => unit
  | suc n => t[n<sn] n

\func t<-helper {x y : Nat} (p : T (x < y)) : T (x < suc y)
  | {0}, {suc y}, unit => unit
  | {suc x}, {suc y}, p => t<-helper p

\import Basics (-)
\import Exercises.CaseEx (-z)

\func div (n k : Nat) (p : T (0 < k)) : Nat =>
  Nat-ind (\lam _ => Nat) (\lam n f => \case n < k \as b, idp : b = n < k \with {
    | false, f=n<k => f (n - k) (helper p f=n<k)
    | true, _ => 0
  }) n
  \where {
    \func helper {n k : Nat} (t[0<k] : T (0 < k)) (f=n<k : false = n < k) : T (n - k < n)
      | {0}, {suc k}, unit, ()
      | {suc n}, {suc k}, unit, f=n<k => helper' n k

    \func helper' (n k : Nat) : T (n - k < suc n) -- T (suc n - suc k < suc n)
      | 0, _ => unit
      | suc n, 0 => t[n<sn] n -- transport (\lam n-0|n => T (n-0|n < suc n)) (-z n) (helper' n 0)
      | suc n, suc k => t<-helper (helper' n k)
  }

-- 3. Prove the following induction principle for lists:

\func length {A : \Type} (xs : List A) : Nat
  | nil => 0
  | cons _ xs => suc (length xs)

\func \infix 0 t[l<l] {A : \Type} (xs ys : List A) => T (length xs < length ys)

{-
\func wf-t[l<l] {A : \Type} (xs : List A) : Acc (t[l<l]) xs =>
  acc-lxs->acc-xs (wf-t< (length xs))
  \where
    \func acc-lxs->acc-xs {A : \Type} {xs : List A} (acc-lxs : Acc t< (length xs)) : Acc (t[l<l]) xs
      | acc rs => acc (\lam ys t[lys<lxs] => acc-lxs->acc-xs (rs (length ys) t[lys<lxs]))
-}

\func List-ind
  {A : \Type}
  (E : List A -> \Type)
  (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> T (length ys < length xs) -> E ys) -> E xs)
  (xs : List A) : E xs =>
  Nat-ind (\lam n => \Pi (xs : List A) (p : length xs = n) -> E xs)
      (\lam n f xs p => r xs (\lam ys t => f (length ys) (transport (\lam lxs|n => T (length ys < lxs|n)) p t) ys idp))
      (length xs) xs idp
  \where
    \func with-acc
      {A : \Type}
      (E : List A -> \Type)
      (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> T (length ys < length xs) -> E ys) -> E xs)
      (xs : List A) (acc-lxs : Acc t< (length xs)): E xs =>
      Nat-ind.with-acc (\lam n => \Pi (xs : List A) (p : length xs = n) -> E xs)
          (\lam n f xs p => r xs (\lam ys t => f (length ys) (transport (\lam lxs|n => T (length ys < lxs|n)) p t) ys idp))
          (length xs) acc-lxs xs idp

-- 4. Implement function 'filter' and prove that it is correct, that is that the following holds:
--    * 'filter p xs' is a sublist of 'xs'
--    * All elements of 'filter p xs' satisfy the predicate 'p'
--    * Any sublist of 'xs' with this property is a sublist of 'filter p xs'

\func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => \case p x \with {
    | false => filter p xs
    | true => cons x (filter p xs)
  }

\data \infix 0 Sublist {A : \Type} (xs : List A) (ys : List A) \with
  | nil, _ => sublist-nil
  | xs, cons y ys => sublist-tail (Sublist xs ys)
  | cons x xs, cons y ys => sublist-head-and-tail (x = y) (Sublist xs ys)

\data All {A : \Type} (P : A -> \Type) (xs : List A) \with
  | _, nil => all-nil
  | P , cons x xs => all-cons (P x) (All P xs)

\func FilterSpec (filter : \Pi {A : \Type} (A -> Bool) (List A) -> List A) =>
  \Pi {A : \Type} (p : A -> Bool) (xs : List A) ->
      \let | fpxs => filter p xs
           | P => \lam x => T (p x)
      \in \Sigma
        (fpxs Sublist xs)
        (All P fpxs)
        (\Pi (ys : List A) (ys Sublist xs) (All P ys) -> ys Sublist fpxs)

\func filter-spec : FilterSpec filter =>
  \lam p xs => (spec-1 p xs, spec-2 p xs, spec-3 p xs)
  \where {
    \func spec-1 {A : \Type} (p : A -> Bool) (xs : List A) : filter p xs Sublist xs \elim xs
      | nil => sublist-nil
      | cons x xs => \case p x \as b \return
      (\case b \with {
        | false => filter p xs
        | true => cons x (filter p xs)
      }) Sublist (cons x xs)
      \with {
        | false => sublist-tail (spec-1 p xs)
        | true => sublist-head-and-tail idp (spec-1 p xs)
      }

    \func spec-2 {A : \Type} (p : A -> Bool) (xs : List A) : All (\lam x => T (p x)) (filter p xs) \elim xs
      | nil => all-nil
      | cons x xs => \case p x \as b, idp : b = p x \return
      All (\lam x => T (p x)) (\case b \with {
        | false => filter p xs
        | true => cons x (filter p xs)
      })
      \with {
        | false, _ => spec-2 p xs
        | true, t=px => all-cons (transport T t=px unit) (spec-2 p xs)
      }

    \func spec-3 {A : \Type} (p : A -> Bool) (xs : List A)
                 (ys : List A) (ys-sublist-xs : ys Sublist xs) (all-p-ys : All (\lam x => T (p x)) ys) : ys Sublist (filter p xs)
    \elim xs, ys, ys-sublist-xs, all-p-ys
      | _, nil, _, _ => sublist-nil
      | cons x xs, ys, sublist-tail ys-sublist-xs, all-p-ys =>
        \let rec => spec-3 p xs ys ys-sublist-xs all-p-ys
        \in \case p x \as b \return
        ys Sublist (\case b \with {
          | false => filter p xs
          | true => cons x (filter p xs)
        })
        \with {
          | false => rec
          | true => sublist-tail rec
        }
      | cons x xs, cons y ys, sublist-head-and-tail idp ys-sublist-xs, all-cons py all-p-ys =>
        \case p x \as b, py : T b \return
        cons y ys Sublist (\case b \with {
          | false => filter p xs
          | true => cons x (filter p xs)
        })
        \with {
          | false, ()
          | true, t => sublist-head-and-tail idp (spec-3 p xs ys ys-sublist-xs all-p-ys)
        }
  }

-- Exercise: Implement another sorting algorithm and prove its correctness.

\import sort (Either, Preorder, TotalPreorder, totality)

\func merge-sort {A : TotalPreorder} (xs : List A) : List A =>
  List-ind (\lam _ => List A) r xs
  \where {
    \func with-acc {A : TotalPreorder} (xs : List A) (acc-lxs : Acc t< (length xs)) : List A =>
      List-ind.with-acc (\lam _ => List A) r xs acc-lxs

    \func r {A : TotalPreorder} (xs : List A) (f : \Pi (ys : List A) -> T (length ys < length xs) -> List A) : List A \elim xs
      | nil => nil
      | cons x nil => cons x nil
      | cons x (cons x' xs) =>
        \let (xs1, lxs1<, xs2, lxs2<) => divide x x' xs
        \in merge (f xs1 lxs1<) (f xs2 lxs2<)

    \func divide {A : \Type} (x x' : A) (xs : List A) :
      \let cxcx'xs => cons x (cons x' xs) \in
        \Sigma (xs1 : List A) (xs1 t[l<l] cxcx'xs) (xs2 : List A) (xs2 t[l<l] cxcx'xs) =>
      \let
        | cxcx'xs => cons x (cons x' xs)
        | l => length cxcx'xs
        | (n, n<l, l-n<n) => ss/2-with-< (length xs)
        | (xs1, n=lxs1, xs2, l-n=lxs2) => split-at-with-<= n cxcx'xs (<=->< n<l)
      \in (xs1, transport (\lam n|lxs1 => T (n|lxs1 < l)) n=lxs1 n<l,
           xs2, transport (\lam l-n|xs2 => T (l-n|xs2 < l)) l-n=lxs2 l-n<n)

    \open Nat (<=)

    \func ss/2-with-< (n : Nat) : \let ssn => suc (suc n) \in \Sigma (q : Nat) (T (q < ssn)) (T (ssn - q < ssn))
      -- Arend doesn't ditinguish the names of `ssn`s in the signature and the recursive case, so the signature above might be misleading. Use the one below for clearer goal info.
      -- \func ss/2-with-< (n : Nat) : \Sigma (q : Nat) (T (q < suc (suc n))) (T (suc (suc n) - q < suc (suc n)))
      | 0 => (1, unit, unit)
      | 1 => (1, unit, unit)
      | suc (suc n) => \let (q, q<ssn, ssn-q<ssn) => ss/2-with-< n
                       \in (suc q, t<-helper q<ssn, t<-helper (n-m<l->sn-m<sl ssn-q<ssn)) -- It always typechecks using `t<-helper` 0 to many times here. I don't understand why!
      \where
        \func n-m<l->sn-m<sl {n m l : Nat} (p : T (n - m < l)) : T (suc n - m < suc l) \elim n, m
          | 0, 0 => p
          | 0, suc m => unit
          | suc n, 0 => p
          | suc n, suc m => n-m<l->sn-m<sl p

    -- `\elim` n only doesn't work with `n` after `xs`.
    -- \func split-at-with-<= {A : \Type} (xs : List A) (n : Nat) (n<=l : n <= length xs) :

    \func split-at-with-<= {A : \Type} (n : Nat) (xs : List A) (n<=l : n <= length xs) :
      \Sigma (xs1 : List A) (n = length xs1) (xs2 : List A) (length xs - n = length xs2)
      | 0, xs, <=.zero<=_ => (nil, idp, xs, -z (length xs))
      | suc n, cons x xs, <=.suc<=suc n<=l =>
        \let rec => split-at-with-<= n xs n<=l
        \in (cons x rec.1, pmap suc rec.2, rec.3, rec.4)

    \func <=->< {n m : Nat} (p : T (n < m)) : n <= m
      | {0}, {suc m}, unit => <=.zero<=_
      | {suc n}, {suc m}, p => <=.suc<=suc (<=->< p)

    \func merge {A : TotalPreorder} (xs ys : List A) : List A
      | nil, ys => ys
      --  | xs, nil => xs
      | cons x xs, nil => cons x xs
      | cons x xs, cons y ys => \case totality x y \with {
        | inl x<=y => cons x (merge xs (cons y ys))
        | inr y<=x => cons y (merge (cons x xs) ys)
      }
      \where \open Either
  }

-- I tried proving `perm-trans` from the other 3 constructors, but it turned out that it's incorrect:
-- if we remove `perm-trans`, the permutation between 2 non-empty lists can either be `perm-cons` or `perm-perm`,
-- which means that the first element of the first list must be equal to either the first or the second element of the second list.

\data Perm {A : \Type} (xs ys : List A) \elim xs, ys
  | nil, nil => perm-nil
  | cons x xs, cons y ys => perm-cons (x = y) (Perm xs ys)
  | xs, ys => perm-trans {zs : List A} (Perm xs zs) (Perm zs ys)
  | cons x (cons x' xs), cons y (cons y' ys) => perm-perm (x = y') (x' = y) (xs = ys)
  \where
    \func perm-perm-alt {A : \Type} {x x' y y' : A} {xs ys : List A} (x=y' : x = y') (x'=y : x' = y) (p-xs-ys : Perm xs ys) : Perm (cons x (cons x' xs)) (cons y (cons y' ys)) =>
      perm-perm x=y' x'=y idp `perm-trans` perm-cons idp (perm-cons idp (p-xs-ys))

\func perm-refl {A : \Type} {xs : List A} : Perm xs xs \elim xs
  | nil => perm-nil
  | cons a l => perm-cons idp perm-refl

\func perm-= {A : \Type} {xs ys : List A} (p : xs = ys) : Perm xs ys =>
  transport (\lam xs|ys => Perm xs xs|ys) p perm-refl

\func merge-sort-perm {A : TotalPreorder} (xs : List A) : Perm xs (merge-sort xs) =>
  with-acc xs (wf-t< (length xs))
  \where {
    \func with-acc {A : TotalPreorder} (xs : List A) (acc-lxs : Acc t< (length xs)) : Perm xs (merge-sort.with-acc xs acc-lxs) =>
      List-ind (\lam xs => \Pi (acc-lxs : Acc t< (length xs)) -> Perm xs (merge-sort.with-acc xs acc-lxs))
          (\lam xs f acc-lxs => \case \elim xs, \elim f, \elim acc-lxs \with {
            | nil, _, acc _ => perm-refl
            | cons x nil, _, acc _ => perm-refl
            | cons x (cons x' xs), f, acc rs =>
              \let
                | (xs1, lxs1<, xs2, lxs2<) => divide x x' xs
                | cxcx'xs=xs1++xs2 => helper-divide x x' xs
                | perm-cxcx'xs-xs1++xs2 => perm-= cxcx'xs=xs1++xs2

                | acc-lxs1 => rs (length xs1) lxs1<
                | acc-lxs2 => rs (length xs2) lxs2<
                | sxs1 => merge-sort.with-acc xs1 acc-lxs1
                | sxs2 => merge-sort.with-acc xs2 acc-lxs2
                | perm-xs1-sxs1  => f xs1 lxs1< acc-lxs1
                | perm-xs2-sxs2 => f xs2 lxs2< acc-lxs2
                | perm-xs1++xs2-sxs1++sxs2 => helper-++ perm-xs1-sxs1 perm-xs2-sxs2

                | perm-sxs1++sxs2-merge-sxs1-sxs2 => helper-merge sxs1 sxs2
              \in
                perm-cxcx'xs-xs1++xs2 `perm-trans` perm-xs1++xs2-sxs1++sxs2 `perm-trans` perm-sxs1++sxs2-merge-sxs1-sxs2
          })
          xs acc-lxs

    \open merge-sort

    \func helper-divide {A : \Type} (x x' : A) (xs : List A) :
      \let (xs1, _, xs2, _) => divide x x' xs \in cons x (cons x' xs) = xs1 ++ xs2 =>
      \let
        | cxcx'xs => cons x (cons x' xs)
        | (n, n<l, _) => ss/2-with-< (length xs)
      \in helper-split-at n cxcx'xs (<=->< n<l)

    \open Nat (<=)

    \func helper-split-at {A : \Type} (n : Nat) (xs : List A) (n<=l : n <= length xs) :
      \let (xs1, _, xs2, _) => split-at-with-<= n xs n<=l \in xs = xs1 ++ xs2
      | 0, xs, <=.zero<=_ => idp
      | suc n, cons x xs, <=.suc<=suc n<=l => pmap (cons x) (helper-split-at n xs n<=l)

    \func \infixl 6 ++ {A : \Type} (xs ys : List A) : List A \elim xs
      | nil => ys
      | cons x xs => cons x (xs ++ ys)

    \open Perm

    \func helper-++ {A : \Type} {xs pxs ys pys : List A} (p-xs-pxs : Perm xs pxs) (p-ys-pys : Perm ys pys) : Perm (xs ++ ys) (pxs ++ pys) \elim xs, pxs, p-xs-pxs
      | nil, nil, perm-nil => p-ys-pys
      | cons x xs, cons px pxs, perm-cons x=px p-xs-pxs => perm-cons x=px (helper-++ p-xs-pxs p-ys-pys)
      | xs, pxs, perm-trans p-xs-pxs-1 p-xs-pxs-2 => helper-++ p-xs-pxs-1 perm-refl `perm-trans` helper-++ p-xs-pxs-2 p-ys-pys -- helper-++ p-xs-pxs-1 p-ys-pys `perm-trans` helper-++ p-xs-pxs-2 perm-refl
      | cons x (cons x' xs), cons px (cons px' pxs), perm-perm idp idp idp => perm-perm-alt idp idp (helper-xs=pxs p-ys-pys) -- perm-perm-alt idp idp (helper-++ perm-refl p-ys-pys)
      \where
        \func helper-xs=pxs {A : \Type} {xs ys pys : List A} (p-ys-pys : Perm ys pys) : Perm (xs ++ ys) (xs ++ pys) \elim xs
          | nil => p-ys-pys
          | cons x xs => perm-cons idp (helper-xs=pxs p-ys-pys)

    \func helper-merge {A : TotalPreorder} (xs ys : List A) : Perm (xs ++ ys) (merge xs ys)
      {-
      | nil, ys => \case \elim ys \with {
        -- Pattern matching seems unnecessary here.
        | nil => perm-refl | cons _ _ => perm-refl
      }
      | xs, nil => transport (\lam xs|xs++nil => Perm xs|xs++nil (merge xs nil)) (xs=xs++nil xs) (\case \elim xs \with {
        -- Pattern matching seems unnecessary here.
        | nil => perm-refl | cons _ _ => perm-refl
      })
      -}
      | nil, ys => perm-refl
      | cons x xs, nil => \let xs => cons x xs \in transport (\lam xs|xs++nil => Perm xs|xs++nil (merge xs nil)) (xs=xs++nil xs) perm-refl
      | cons x xs, cons y ys => \case totality x y \as e \return
      Perm (cons x (xs ++ cons y ys)) (\case e \with {
        | inl _ => cons x (merge xs (cons y ys))
        | inr _ => cons y (merge (cons x xs) ys)
      })
      \with {
        | inl x<=y => perm-cons idp (helper-merge xs (cons y ys))
        | inr y<=x => helper (cons x xs) y ys `perm-trans` perm-cons idp (helper-merge (cons x xs) ys)
      }
      \where {
        \open Either

        \func helper {A : TotalPreorder} (xs : List A) (y : A) (ys : List A) : Perm (xs ++ cons y ys) (cons y (xs ++ ys)) \elim xs
          | nil => perm-refl
          | cons x xs => perm-cons idp (helper xs y ys) `perm-trans` perm-perm idp idp idp
      }

    \func xs=xs++nil {A : \Type} (xs : List A) : xs = xs ++ nil
      | nil => idp
      | cons x xs => pmap (cons x) (xs=xs++nil xs)
  }

\func head {A : \Type} (def : A) (xs : List A) : A \elim xs
  | nil => def
  | cons a _ => a

\open Preorder

\data IsSorted {A : Preorder} (xs : List A) \elim xs
  | nil => nil-sorted
  | cons x xs => cons-sorted (x <= head x xs) (IsSorted xs)

\func merge-sort-sorted {A : TotalPreorder} (xs : List A) : IsSorted (merge-sort xs) =>
  with-acc xs (wf-t< (length xs))
  \where {
    \func with-acc {A : TotalPreorder} (xs : List A) (acc-lxs : Acc t< (length xs)) : IsSorted (merge-sort.with-acc xs acc-lxs) =>
      List-ind (\lam xs => \Pi (acc-lxs : Acc t< (length xs)) -> IsSorted (merge-sort.with-acc xs acc-lxs))
          (\lam xs f acc-lxs => \case \elim xs, \elim f, \elim acc-lxs \with {
            | nil, _, acc _ => nil-sorted
            | cons x nil, _, acc _ => cons-sorted (x<=x x) nil-sorted
            | cons x (cons x' xs), f, acc rs =>
              \let (xs1, lxs1<, xs2, lxs2<) => divide x x' xs
              \in helper-merge (f xs1 lxs1< (rs (length xs1) lxs1<)) (f xs2 lxs2< (rs (length xs2) lxs2<))
          })
          xs acc-lxs

    \open merge-sort
    \open Either

    \func helper-merge {A : TotalPreorder} {xs ys : List A} (is-xs : IsSorted xs) (is-ys : IsSorted ys) : IsSorted (merge xs ys) \elim xs, ys, is-xs, is-ys
      | nil, ys, nil-sorted, is-ys => is-ys
      | cons _ _, nil, is-xs, nil-sorted => is-xs
      | cons x xs, cons y ys, cons-sorted x<=h is-xs, cons-sorted y<=h is-ys => \case totality x y \as e \return
      IsSorted (\case e \with {
        | inl _ => cons x (merge {A} xs (cons y ys))
        | inr _ => cons y (merge {A} (cons x xs) ys)
      })
      \with {
        | inl x<=y => helper x<=h x<=y is-xs (cons-sorted y<=h is-ys)
        | inr y<=x => helper y<=x y<=h (cons-sorted x<=h is-xs) is-ys
      }
      \where {
        \func helper {A : TotalPreorder} {z : A} {xs ys : List A}
                     (z<=hzxs : z <= head z xs) (z<=hzys : z <= head z ys)
                     (is-xs : IsSorted xs) (is-ys : IsSorted ys) : IsSorted (cons z (merge xs ys))
        \elim xs, ys, is-xs, is-ys
          | nil, ys, nil-sorted, is-ys => cons-sorted z<=hzys is-ys
          | cons _ _, nil, is-xs, nil-sorted => cons-sorted z<=hzxs is-xs
          | cons x xs, cons y ys, cons-sorted x<=h is-xs, cons-sorted y<=h is-ys => \case totality x y \as e \return
          IsSorted (cons z (\case e \with {
            | inl _ => cons x (merge xs (cons y ys))
            | inr _ => cons y (merge (cons x xs) ys)
          }))
          \with {
            | inl x<=y => cons-sorted z<=hzxs (helper x<=h x<=y is-xs (cons-sorted y<=h is-ys))
            | inr y<=x => cons-sorted z<=hzys (helper y<=x y<=h (cons-sorted x<=h is-xs) is-ys)
          }
      }

    \func x<=x {A : TotalPreorder} (x : A) : x <= x =>
      \case totality x x \with {
        | inl x<=x => x<=x
        | inr x<=x => x<=x
      }
  }
