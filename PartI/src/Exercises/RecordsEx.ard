\import Records

-- 1. Define the function 'swap' in several ways.

-- Using \cowith and field access.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst' => p.snd'
  | snd' => p.fst'

-- Using \new and pattern matching.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A
  | (fst, snd) => \new Pair {
    | fst' => snd
    | snd' => fst
  }

-- Using \new and field access.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair {
  | fst' => p.snd'
  | snd' => p.fst'
}

-- 2. Prove that 'swap (swap p) = p'.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p =>
  idp

-- 3. Prove that the type 'PosNat 0' is empty, but the type 'PosNat 1' is not.

\data Empty

\func zero-isNotPos (p : PosNat 0) : Empty =>
  -- How to pattern match on p?
  \case p.p \with {
  }

\func one-isPos : PosNat 1 =>
  \new PosNat 1 tt

-- 4. Define the \record consisting of pairs of coprime natural numbers.
--    Define the type of natural numbers that are coprime with 60.

\import Exercises.BasicsEx (gcd)

\record CoprimeNatPair
  | fst : Nat
  | snd : Nat
  | coprime : gcd fst snd = 1

\func NatCoprimeWith60 => CoprimeNatPair { | snd => 60 }

-- 5. Define the class of monads, which extends the class of functors. Define \instance of this class for 'Maybe'.

\class Monad \extends Functor
  | \infixl 1 >>= {A B : \Type} (F A) (A -> F B) : F B
  --  | >> {A B : \Type} (F A) (F B) : (F B)
  | return {A : \Type} A : F A
  | monad-left-id {A B : \Type} (a : A) (f : A -> F B) : (return a >>= f) = f a
  | monad-right-id {A : \Type} (m : F A) : (m >>= return) = m
  | monad-assoc {A B C : \Type} (m : F A) (f : A -> F B) (g : B -> F C) : (m >>= f >>= g) = (m >>= (\lam x => f x >>= g))

\data Maybe (A : \Type) | nothing | just A

\instance MaybeMonad : Monad Maybe
  | fmap {A B : \Type} (f : A -> B) : (Maybe A) -> Maybe B => \lam ma => \case ma \with {
    | nothing => nothing
    | just a => just (f a)
  }
  | fmap-id {A : \Type} (y : Maybe A) : fmap (\lam (x : A) => x) y = y \with {
    | nothing => idp
    | just a => idp
  }
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : Maybe A) : fmap (\lam x => g (f x)) y = fmap g (fmap f y) \elim y {
    | nothing => idp
    | just a => idp
  }
  | >>= {A B : \Type} (ma : Maybe A) (f : A -> Maybe B) : Maybe B => \case ma \with {
    | nothing => nothing
    | just a => \case f a \with {
      | nothing => nothing
      | just b => just b
    }
  }
  | return : \Pi {A : \Type} A -> Maybe A => just
  | monad-left-id => {?}
{-
  | monad-left-id {A B : \Type} (a : A) (f : A -> Maybe B) : (return a >>= f) = f a => \case f a \with {
    | nothing => idp
    | just a1 => idp
  }
-}
  | monad-right-id => {?}
  | monad-assoc => {?}

-- 6. Define instances for the class of monads for 'State' and 'State''.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Type) : Monad (State S)
  | fmap f (sa : State S A) => \new State {
    | state s => \let (s', a) => sa.state s \in (s', f a)
  }
  | fmap-id y => idp
  | fmap-comp f g y => idp
  | >>= (sa : State S A) f => \new State {
    | state s => \let | (s', a) => sa.state s
                      | sb : State S B => f a
                 \in sb.state s'
  }
  | return a => \new State { | state s => (s, a) }
  | monad-left-id => {?}
  | monad-right-id => {?}
  | monad-assoc => {?}

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance State'Monad (S : \Type) : Monad (State' S)
  | fmap {A} {B} f (sa : State' S A) : State' S B \elim sa {
    | state' sf => state' (\lam s => \let (s', a) => sf s \in (s', f a))
  }
  | fmap-id {A} (y : State' S A) : fmap (\lam (x : A) => x) y = y \with {
    | state' sf => idp
  }
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : State' S A) : fmap (\lam x => g (f x)) y = fmap g (fmap f y) \elim y {
    | state' sf => idp
  }
  | >>= {A} {B} (sa : State' S A) (f : A -> State' S B) : State' S B \elim sa {
    | state' sfa => state' (
      \lam s =>
          \let | (s', a) => sfa s
               | sb => f a
          \in \case f a \with {
            | state' sfb => sfb s'
          }
    )
  }
  | return a => state' (\lam s => (s, a))
  | monad-left-id => {?}
  | monad-right-id => {?}
  | monad-assoc => {?}
